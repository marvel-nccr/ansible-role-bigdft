---
# see bigdft.org for installation instructions
- name: Install bigdft dependencies
  become: true
  apt:
    name:
      - gfortran
      - openmpi-common
      - openmpi-bin
      - libopenmpi-dev
      - libblacs-mpi-dev
      - libscalapack-mpi-dev
      - libblas-dev
      - liblapack-dev
      - libnetcdf-dev
      - cmake
      - python3-dev
      - python3-pip
      - autoconf

- name: Get bigdft source
  git:
    repo: 'https://gitlab.com/l_sim/bigdft-suite.git'
    dest: "{{ bigdft_code_folder }}/bigdft-suite"
    force: true
    version: devel
  register: bigdft_downloaded

- name: Create build dir
  file:
    path: "{{ bigdft_topdir }}/build"
    state: directory

- name: Copy rcfile to build folder
  copy:
    src: "{{ bigdft_topdir }}/rcfiles/ubuntu_MPI.rc"
    remote_src: yes
    dest: "{{ bigdft_topdir }}/build/buildrc"
  register: buildrc

# necessary to install inside /usr/local
- name: Set prefix in rcFile
  lineinfile:
    path: "{{ bigdft_topdir }}/build/buildrc"
    line: "prefix = '{{ bigdft_prefix }}'"
    state: present
  when: buildrc.changed

- name: Install python six package
  pip:
    name: six
    version: "1.15"

- name: Make bigdft executables
  become: true
  command: "{{ bigdft_python_path }} ../Installer.py build -y -a babel -v"
  args:
    chdir: "{{ bigdft_topdir }}/build"
    creates: "{{ bigdft_prefix }}/bin/bigdft"
  environment:
    JHBUILD_RUN_AS_ROOT: 1
    PYTHON: "python3"
  register: bigdft_make

# temporarily disabled, due to an issue with a python script used on this test.
# - include_tasks: tests.yml
#  when: run_tests is defined and run_tests

- name: "Put a line in ~/.profile to add bigdft to the path"
  lineinfile:
    path: "${HOME}/.profile"
    line: "export PATH=${PATH}:{{ bigdft_prefix }}/bin"

- name: add dynamic library path config
  become: true
  template:
    src: bigdft.conf
    dest: /etc/ld.so.conf.d/bigdft.conf
  register: ld_conf

- name: apply dynamic library path config
  become: true
  command: ldconfig
  when: ld_conf.changed

- include_role:
    name: release_notes
  vars:
    section: "bigdft"
    option: "version"
    value: "{{ bigdft_version }}"
  when: release_notes is defined and release_notes

- include_role:
    name: release_notes
  vars:
    section: "bigdft"
    option: "usage"
    value: >-
      bigdft is compiled and installed in {{ bigdft_prefix }}.
      simply run 'bigdft'
  when: release_notes is defined and release_notes
